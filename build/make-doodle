#!/bin/bash

function print_help_and_exit {
    echo "Usage: $(basename $0) [options]"
    echo "  -h      Show this usage guide."
    echo "  -d      Also build debug version."
    echo "  -D      Only build debug version."
    echo "  -c      Clean."
    echo "  -C=jar  Location of the Closure compiler."
    exit 0
}

#using a relative path.
#this script is in the ./build dir
cd "$(dirname $(readlink -f $0))"
cd ..
PROJECT_HOME="$PWD"
DEBUG_OUT_FILE="$PROJECT_HOME/build/doodle-debug.js"
MIN_OUT_FILE="$PROJECT_HOME/build/doodle.js"
CLOSURE_COMPILER="$PROJECT_HOME/build/compiler.jar"

function build_full {
    cat ./build/prologue.js > "$DEBUG_OUT_FILE"
    cat ./src/compat/es5.js >> "$DEBUG_OUT_FILE"
    cat ./src/utils.js >> "$DEBUG_OUT_FILE"
    cat ./lib/Stats.js >> "$DEBUG_OUT_FILE"

    #constants
    cat ./src/constants/keyboard.js >> "$DEBUG_OUT_FILE"
    cat ./src/constants/gradienttype.js >> "$DEBUG_OUT_FILE"
    cat ./src/constants/pattern.js >> "$DEBUG_OUT_FILE"
    cat ./src/constants/linecap.js >> "$DEBUG_OUT_FILE"
    cat ./src/constants/linejoin.js >> "$DEBUG_OUT_FILE"

    cat ./src/events/event.js >> "$DEBUG_OUT_FILE"
    cat ./src/events/uievent.js >> "$DEBUG_OUT_FILE"
    cat ./src/events/mouseevent.js >> "$DEBUG_OUT_FILE"
    cat ./src/events/textevent.js >> "$DEBUG_OUT_FILE"
    cat ./src/events/keyboardevent.js >> "$DEBUG_OUT_FILE"
    cat ./src/events/constants.js >> "$DEBUG_OUT_FILE"

    cat ./src/geom/point.js >> "$DEBUG_OUT_FILE"
    cat ./src/geom/matrix.js >> "$DEBUG_OUT_FILE"
    cat ./src/geom/rectangle.js >> "$DEBUG_OUT_FILE"

    cat ./src/eventdispatcher.js >> "$DEBUG_OUT_FILE"
    cat ./src/node.js >> "$DEBUG_OUT_FILE"
    cat ./src/sprite.js >> "$DEBUG_OUT_FILE"

    cat ./src/elementnode.js >> "$DEBUG_OUT_FILE"
    cat ./src/layer.js >> "$DEBUG_OUT_FILE"
    cat ./src/display.js >> "$DEBUG_OUT_FILE"
}

function strip_debugging {
    sed '/\/\*DEBUG\*\//,/\/\*END_DEBUG\*\//d' "$DEBUG_OUT_FILE" > "$MIN_OUT_FILE"
}

function print_compiler_warning {
    echo -e "\n\tWarning: Unable to locate the Closure compiler."
    echo -e "\tIt can be obtained from http://code.google.com/closure/compiler/"
    echo -e "\tContinuing without file compilation.\n"
}

function compile_file {
    if [ ! -f "$CLOSURE_COMPILER" ]; then
        print_compiler_warning
    else
        mv "$MIN_OUT_FILE" "$MIN_OUT_FILE.tmp"
        echo -n -e "\tCompiling file... "
        if java -jar "$CLOSURE_COMPILER" --js "$MIN_OUT_FILE.tmp" \
                --js_output_file "$MIN_OUT_FILE"; then
            echo "done."
            rm "$MIN_OUT_FILE.tmp"
        else
            print_compiler_warning
            mv "$MIN_OUT_FILE.tmp" "$MIN_OUT_FILE" #move back
        fi
    fi
}

function clean_up {
    echo "Clean:"
    if [ -f "$MIN_OUT_FILE" ]; then
        rm "$MIN_OUT_FILE"
        echo -e "\tRemoved $MIN_OUT_FILE"
    fi
    if [ -f "$MIN_OUT_FILE.tmp" ]; then
        rm "$MIN_OUT_FILE.tmp"
        echo -e "\tRemoved $MIN_OUT_FILE.tmp"
    fi
    if [ -f "$DEBUG_OUT_FILE" ]; then
        rm "$DEBUG_OUT_FILE"
        echo -e "\tRemoved $DEBUG_OUT_FILE"
    fi
}


#parse args
while getopts "hdDcC:" option; do
    case $option in
        d) BUILD_DEBUG=1;;
        D) BUILD_DEBUG=1; BUILD_DEBUG_ONLY=1;;
        c) clean_up; exit 0;;
        C) CLOSURE_COMPILER="$OPTARG";;
        h) print_help_and_exit;;
        \?) print_help_and_exit;;
    esac
done

echo "For more options: $(basename $0) -h"

echo "Build:"
#creates debug version
build_full
echo -e "\tCreated $DEBUG_OUT_FILE"

#create min version
if [ -z "$BUILD_DEBUG_ONLY" ]; then
    echo -n -e "\tRemove debugging code... "
    if strip_debugging; then
        echo "done."
    fi
    compile_file
    echo -e "\tCreated $MIN_OUT_FILE"
fi

#cleanup
if [ -z "$BUILD_DEBUG" ]; then
    echo "Cleanup:"
    rm "$DEBUG_OUT_FILE"
    echo -e "\tRemoved $DEBUG_OUT_FILE"
fi
